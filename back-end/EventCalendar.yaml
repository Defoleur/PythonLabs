openapi: 3.0.3
info:
  title: Events Calendar
  description: |- 
  version: 1.0.0
tags:
  - name: event
    description: Everything about your event
  - name: user
    description: Operations about user
paths:
  /event:
    post:
      tags:
        - event
      summary: Create event
      operationId: createEvent
      requestBody:
        description: Created event object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
          '200':
            description: Event created
          '400':
            description: Invalid input
          '404':
            description: Request failed. Not found
      security:
        - events_auth: [user]
    put:
      tags:
        - event
      summary: Update existing event
      operationId: updateEvent
      requestBody:
        description: Created event object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated
        '400':
            description: Invalid input
        '403':
          description: User doesn't have enough rights
        '404':
            description: Request failed. Not found  
      security:
        - events_auth: [admin]
  /event/{userId}/allCreatedEvents:
    get:
      tags:
        - event
      summary: Get all created events by user
      operationId: getAllCreatedEvents
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
          description: Success
        '400':
          description: Invalid user id supplied
        '403':
          description: User doesn't have enough rights
        '404':
            description: Request failed. Not found 
      security:
        - events_auth: [admin]
  /event/{userId}/allAttachedEvents:
    get:
      tags:
        - event
      summary: Get all attached to user events
      operationId: getAllAttachedToUserEvents
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
          description: Success
        '400':
          description: Invalid user id supplied
        '403':
          description: User doesn't have enough rights
        '404':
          description: User not found
      security:
        - events_auth: [admin]
  /event/{eventId}:
    get:
      tags:
        - event
      summary: Get event by id
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/Event'
          description: Event provided
        '400':
          description: Invalid event id supplied
        '403':
          description: User doesn't have enough rights  
        '404':
          description: Event not found
      security:
        - events_auth: [user]
    delete:
      tags:
        - event
      summary: Delete event by id
      operationId: deleteEventById
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleting successful
        '400':
          description: Invalid event id supplied
        '403':
          description: User doesn't have enough rights
        '404':
          description: Event not found
      security:
        - events_auth: [admin]
  /event/user:
    post:
      tags:
        - event
      summary: Add user to event
      operationId: addUserToEvent
      requestBody:
        description: Created event object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUser'
      responses:
        '200':
          description: User added to event
        '400':
          description: Bad request
        '403':
          description: User doesn't have enough rights
        '404':
          description: Event or user is not valid
      security:
        - events_auth: [admin]
  /event/{eventId}/{userId}:
    delete:
      tags:
        - event
      summary: Delete user from event by id
      operationId: deleteUserFromEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleting successful
        '400':
          description: Invalid event or user id supplied
        '403':
          description: User doesn't have enough rights
        '404':
          description: Event or user not found
      security:
        - events_auth: [admin]
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '403':
          description: User doesn't have enough rights
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '403':
          description: User doesn't have enough rights
        '404':
          description: User not found
components:
  schemas:
    Event:
      type: object
      required:
        - title
        - date
        - user
      properties:
        id:
          type: integer
          example: 11
        title:
          type: string
          example: My Title!
        content:
          type: string
          example: This is a description to my new event!
        date:
          type: string
          format: 2017-07-21
          example: 2022-09-11
        startTime:
          type: string
          format: 2022-09-11T17:30:00Z
          example: 2022-09-11T16:00:00Z
        endTime:
          type: string
          format: 2022-09-11T17:30:00Z
          example: 2022-09-11T17:30:00Z
        user:
          type: integer
          example: 21
    User:
      type: object
      required:
        - username
        - email
        - password
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        role:
          type: string
          enum:
            - admin
            - user
      xml:
        name: user
    EventUser:
      type: object
      properties:
        event:
          type: integer
          example: 1
        user:
          type: integer
          example: 10
  securitySchemes:
    events_auth:
      type: http
      scheme: bearer
    api_key:
      type: apiKey
      name: api_key
      in: header